package com.hart.android.ui.tests.rottentomatoes;import com.hart.android.ui.pageobjects.rottentomatoes.DetailsPage;import com.hart.android.ui.pageobjects.rottentomatoes.Movie;import com.hart.android.ui.pageobjects.rottentomatoes.ResultsPage;import com.hart.android.ui.pageobjects.rottentomatoes.RottenTomatoesBasePage;import com.kareo.test.ui.AssertWrapper;import com.kareo.ui.AbstractUIBase;import org.testng.Assert;import org.testng.annotations.AfterTest;import org.testng.annotations.BeforeTest;import org.testng.annotations.Test;import java.math.BigInteger;import java.security.SecureRandom;/** * Created by sushil.mayer on 12/10/2015. */public class BasicFlowTest extends AbstractUIBase {    private RottenTomatoesBasePage rottenTomatoesBasePage;    private  Movie movie;    @Test    public void HappyPath(){        try {            //Verifying If Initial Page (before searching) displays the correct page            Assert.assertTrue(rottenTomatoesBasePage.isInitialPageCorrect(), "ERROR: Initial Page Incorrect");            //Searching for "Rotten Tomatoes Challenge"            rottenTomatoesBasePage.setSearchTextBox("Rotten Tomatoes Challenge");            ResultsPage resultsPage = rottenTomatoesBasePage.clickSearchButton();            Assert.assertNotNull(resultsPage, "ERROR: Results Page Incorrect");            //Verifying if an expected movie is displayed in the list            Assert.assertTrue(resultsPage.isTitleInList("Pulp Fiction"), "ERROR: Unable to find title Pulp Fiction");            //Open Movie by the Title            DetailsPage detailsPage = resultsPage.clickMovieByTitle("Pulp Fiction");            Assert.assertNotNull(detailsPage, "ERROR: Details Page Incorrect");            //Verification of expected Meta Data            Assert.assertTrue(detailsPage.getTitle().contains("Pulp Fiction"), "ERROR: Verifying Title");            Assert.assertTrue(detailsPage.getDirector().contains("Tarantino"), "ERROR: Verifying Director");            Assert.assertTrue(detailsPage.getAudienceScore().contains("96"), "ERROR: Verifying Audience Score");            Assert.assertTrue(detailsPage.getTatometer().contains("93"), "ERROR: Verifying Tatometer");            Assert.assertTrue(detailsPage.getRating().contains("R"), "ERROR: Verifying Rating");            Assert.assertTrue(detailsPage.getSummary().contains("Pulp Fiction"), "ERROR: Verifying Summary");        } catch (Exception e){            e.printStackTrace();            rottenTomatoesBasePage.takeScreenshot();            Assert.fail("TEST FAILED: " + getMethodName());        }    }    @Test    public void NegativeTests(){        try {            //Verifying If Initial Page (before searching) displays the correct page            Assert.assertTrue(rottenTomatoesBasePage.isInitialPageCorrect(), "ERROR: Initial Page Incorrect");            //Searching for "Rotten Tomatoes Challenge"            rottenTomatoesBasePage.setSearchTextBox("Rotten Tomatoes Challenge");            ResultsPage resultsPage = rottenTomatoesBasePage.clickSearchButton();            Assert.assertNotNull(resultsPage, "ERROR: Results Page Incorrect");            //Verifying if an expected movie is displayed in the list            Assert.assertTrue(resultsPage.isTitleInList("Pulp Fiction"), "ERROR: Unable to find title Pulp Fiction");            //Open Movie by the Title            DetailsPage detailsPage = resultsPage.clickMovieByTitle("Pulp Fiction");            Assert.assertNotNull(detailsPage, "ERROR: Details Page Incorrect");            //Verifying the Invalid data Assert False            Assert.assertFalse(detailsPage.getTitle().contains("Jurrasic Park"), "ERROR: Verifying Title");            Assert.assertFalse(detailsPage.getDirector().contains("Speilberg"), "ERROR: Verifying Director");            Assert.assertFalse(detailsPage.getAudienceScore().contains("55"), "ERROR: Verifying Audience Score");            Assert.assertFalse(detailsPage.getTatometer().contains("55"), "ERROR: Verifying Tatometer");            Assert.assertFalse(detailsPage.getRating().contains("PG"), "ERROR: Verifying Rating");            Assert.assertFalse(detailsPage.getSummary().contains("Inception"), "ERROR: Verifying Summary");        } catch (Exception e){            e.printStackTrace();            rottenTomatoesBasePage.takeScreenshot();            Assert.fail("TEST FAILED: " + getMethodName());        }    }    @Test    public void EmptySearchBox(){        try {            //Verifying If Initial Page (before searching) displays the correct page            Assert.assertTrue(rottenTomatoesBasePage.isInitialPageCorrect(), "ERROR: Initial Page Incorrect");            //Searching without entering Search criteria            rottenTomatoesBasePage.setSearchTextBox("");            ResultsPage resultsPage = rottenTomatoesBasePage.clickSearchButton();            Assert.assertNull(resultsPage, "ERROR: Results Page Incorrect");        } catch (Exception e){            e.printStackTrace();            rottenTomatoesBasePage.takeScreenshot();            Assert.fail("TEST FAILED: " + getMethodName());        }    }    @Test    public void InvalidSearchCriteria(){        try {            //Verifying If Initial Page (before searching) displays the correct page            Assert.assertTrue(rottenTomatoesBasePage.isInitialPageCorrect(), "ERROR: Initial Page Incorrect");            //Searching with invalid Search criteria            rottenTomatoesBasePage.setSearchTextBox("@#$)@#$)@#$(@#$(@SDJFSfksjdfk#@$!@");            ResultsPage resultsPage = rottenTomatoesBasePage.clickSearchButton();            Assert.assertNull(resultsPage, "ERROR: Results Page Incorrect");        } catch (Exception e){            e.printStackTrace();            rottenTomatoesBasePage.takeScreenshot();            Assert.fail("TEST FAILED: " + getMethodName());        }    }    @Test    public void CRUDTest(){        try {            //Verifying If Initial Page (before searching) displays the correct page            Assert.assertTrue(rottenTomatoesBasePage.isInitialPageCorrect(), "ERROR: Initial Page Incorrect");            //Create New Movie            movie = createNewMovie();            //Searching for "Rotten Tomatoes Challenge"            rottenTomatoesBasePage.setSearchTextBox(movie.getTitle());            ResultsPage resultsPage = rottenTomatoesBasePage.clickSearchButton();            Assert.assertNotNull(resultsPage, "ERROR: Results Page Incorrect");            //Verifying if an expected movie is displayed in the list            Assert.assertTrue(resultsPage.isTitleInList(movie.getTitle()), "ERROR: Unable to find title Pulp Fiction");            //Open Movie by the Title            DetailsPage detailsPage = resultsPage.clickMovieByTitle("Pulp Fiction");            Assert.assertNotNull(detailsPage, "ERROR: Details Page Incorrect");            //Verification of expected Meta Data            Assert.assertTrue(detailsPage.getTitle().contains(movie.getTitle()), "ERROR: Verifying Title");            Assert.assertTrue(detailsPage.getDirector().contains(movie.getDirector()), "ERROR: Verifying Director");            Assert.assertTrue(detailsPage.getAudienceScore().contains(movie.getAudinceScore()), "ERROR: Verifying Audience Score");            Assert.assertTrue(detailsPage.getTatometer().contains(movie.getTatometer()), "ERROR: Verifying Tatometer");            Assert.assertTrue(detailsPage.getRating().contains(movie.getRating()), "ERROR: Verifying Rating");            Assert.assertTrue(detailsPage.getSummary().contains(movie.getSummary()), "ERROR: Verifying Summary");        } catch (Exception e){            e.printStackTrace();            rottenTomatoesBasePage.takeScreenshot();            Assert.fail("TEST FAILED: " + getMethodName());        }        finally {            Assert.assertTrue(deleteNewMovie(movie.getId()), "ERROR: Deleting Movie");        }    }    private Movie createNewMovie() {        //Using an API call make new movie        movie = new Movie();        movie.setTitle(getRandomText());        movie.setDirector(getRandomText());        movie.setTatometer(getRandomText());        movie.setRating(getRandomText());        movie.setSummary(getRandomText());        movie.setAudinceScore(getRandomText());        return movie;    }    private boolean deleteNewMovie(long id) {        //Using an API call delete movie        return true;    }    public String getRandomText() {        SecureRandom random = new SecureRandom();        return new BigInteger(130, random).toString(32);    }    @BeforeTest    protected void loginToRottenTomatoes() {        //Initialized Rotten Tomatoes Base Class        rottenTomatoesBasePage = new RottenTomatoesBasePage(getDriver());        AssertWrapper.assertNotNull(rottenTomatoesBasePage, "ERROR: Rotten Tomatoes Base Page Not Found");    }    @AfterTest    protected void logoutOfRottenTomatoes() {        //Closing Driver        closeDriver();    }}